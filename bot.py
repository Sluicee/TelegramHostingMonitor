import asyncio
import logging
import psutil
import requests
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from helpers import get_root_disk_usage
from monitoring import check_system_and_sites

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

TOKEN = os.getenv("TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
WEBSITES = [site.strip().lower() for site in os.getenv('WEBSITES', '').split(',')]

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

@dp.message(Command("status"))
async def check_status(message: Message):
    response_text = "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:\n"
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
    cpu = psutil.cpu_percent()
    ram = psutil.virtual_memory().percent
    total, used, available, percent = get_root_disk_usage()
    response_text += f"üîπ CPU: {cpu}%\nüîπ RAM: {ram}%\n"
    response_text += f"üîπ –î–∏—Å–∫: {percent:.2f}% ({available:.2f} —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ {total:.2f})\n"

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤
    for site in WEBSITES:
        try:
            response = requests.get(site, timeout=5)
            status = f"‚úÖ {response.status_code}" if response.status_code == 200 else f"‚ö†Ô∏è {response.status_code}"
        except requests.exceptions.RequestException:
            status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        response_text += f"{site} - {status}\n"

    await message.answer(response_text)

async def on_startup():
    logging.info("Starting the bot...")
    asyncio.create_task(check_system_and_sites(bot))  # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞

async def main():
    logging.basicConfig(level=logging.INFO)
    logging.info("Bot is about to start polling...")
    await on_startup()  # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
