import asyncio
import psutil
import requests
import os
from dotenv import load_dotenv
from aiogram import Bot
import logging

from helpers import get_root_disk_usage

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MAX_CPU_USAGE = 95  # –ü–æ—Ä–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ CPU (%)
MAX_RAM_USAGE = 95  # –ü–æ—Ä–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ RAM (%)
MIN_FREE_DISK_GB = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (–≤ –ì–ë)
CHECK_INTERVAL = 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
RECHECK_INTERVAL = 30  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–ª–µ—Ä—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

YOUR_USER_ID = os.getenv("USER_ID")
WEBSITES = [site.strip().lower() for site in os.getenv('WEBSITES', '').split(',')]

logging.basicConfig(level=logging.INFO)

async def check_site(site):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ False."""
    try:
        response = requests.get(site, timeout=5)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False

async def check_system_and_sites(bot: Bot):
    site_failures = {}  # –•—Ä–∞–Ω–∏—Ç —Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–∞–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑

    while True:
        try:
            logging.info("Checking system resources...")

            # üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            cpu_usage = psutil.cpu_percent()
            ram_usage = psutil.virtual_memory().percent
            total, used, available, percent = get_root_disk_usage()

            alert_message = ""

            if cpu_usage > MAX_CPU_USAGE:
                alert_message += f"‚ùó CPU –∑–∞–≥—Ä—É–∂–µ–Ω: {cpu_usage}%\n"
            if ram_usage > MAX_RAM_USAGE:
                alert_message += f"‚ùó RAM –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {ram_usage}%\n"
            if int(available) < MIN_FREE_DISK_GB:
                alert_message += f"‚ùó –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {available:.2f} –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ {total:.2f} –ì–ë\n"

            # üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤
            for site in WEBSITES:
                is_down = not await check_site(site)

                if is_down:
                    if site in site_failures:  # –°–∞–π—Ç —É–∂–µ –±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                        alert_message += f"‚ùå {site} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø–æ–¥—Ä—è–¥!\n"
                    else:
                        site_failures[site] = True  # –°–∞–π—Ç —É–ø–∞–ª –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
                        logging.warning(f"{site} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {RECHECK_INTERVAL} —Å–µ–∫—É–Ω–¥.")
                        await asyncio.sleep(RECHECK_INTERVAL)
                        if not await check_site(site):  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                            alert_message += f"‚ùå {site} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!\n"
                        else:
                            site_failures.pop(site, None)  # –°–∞–π—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                else:
                    if site in site_failures:
                        site_failures.pop(site, None)  # –°–∞–π—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è

            # üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª–µ—Ä—Ç—ã
            if alert_message:
                await bot.send_message(YOUR_USER_ID, alert_message)

            await asyncio.sleep(CHECK_INTERVAL)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {str(e)}")
            await bot.send_message(YOUR_USER_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {str(e)}")
